import requests
import json
import pandas as pd
import time
import os

def get_etf_data(output_path="path:\\to\\your\\etf_data.xlsx"):
    """
    Fetches ETF data from justetf.com, processes it, and saves it to an Excel file.
    """
    start_time = time.time()
    all_etfs = []
    page = 0
    page_size = 100  # Max 100 elements per page

    # Define the request URL
    # Note: The '5-1.0-' part of the URL can sometimes be dynamic.
    # If the script stops working, re-check this in your browser's network tab.
    url = "https://www.justetf.com/en/search.html?5-1.0-container-tabsContentContainer-tabsContentRepeater-1-container-content-etfsTablePanel&search=ETFS&_wicket=1"

    # Define headers. YOU MUST UPDATE THE 'Cookie' VALUE WITH THE LATEST FROM YOUR BROWSER.

headers = {
    "Accept": "application/json, text/javascript, */*; q=0.01",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "lt;q=0.6",
    "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
    
    "Cookie": "XSRF-TOKEN=YOUR_XSRF_TOKEN; JSESSIONID=YOUR_SESSION_ID; AWSALB=...; AWSALBCORS=...",
    
    "Origin": "https://www.justetf.com",
    "Priority": "u=1, i",
    "Referer": "https://www.justetf.com/en/search.html?search=ETFS",
    
    # Galima naudoti tikrą naršyklės user agent arba generuoti per lib
    "User-Agent": "YOUR_USER_AGENT_STRING",
    
    # Kiti naršyklės šabloniniai antraščių laukai
    "Sec-Ch-Ua": '"Chromium";v="114", "Not.A/Brand";v="99"',
    "Sec-Ch-Ua-Mobile": "?0",
    "Sec-Ch-Ua-Platform": '"Windows"',
    "Sec-Fetch-Dest": "empty",
    "Sec-Fetch-Mode": "cors",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Gpc": "1",
    "X-Requested-With": "XMLHttpRequest"
}
print("Pradedamas ETF duomenų nuskaitymas...")

    # Define the base payload with all the 'columns' and other static parameters
    base_payload = {
        "5-1.0-container-tabsContentContainer-tabsContentRepeater-1-container-content-etfsTablePanel": "",
        "search": "ETFS",
        "_wicket": "1",
        "columns[0][data]": "",
        "columns[0][name]": "selectCheckbox",
        "columns[0][searchable]": "true",
        "columns[0][orderable]": "false",
        "columns[0][search][value]": "",
        "columns[0][search][regex]": "false",
        "columns[1][data]": "name",
        "columns[1][name]": "name",
        "columns[1][searchable]": "true",
        "columns[1][orderable]": "true",
        "columns[1][search][value]": "",
        "columns[1][search][regex]": "false",
        "columns[2][data]": "",
        "columns[2][name]": "sparkline",
        "columns[2][searchable]": "true",
        "columns[2][orderable]": "false",
        "columns[2][search][value]": "",
        "columns[2][search][regex]": "false",
        "columns[3][data]": "fundCurrency",
        "columns[3][name]": "fundCurrency",
        "columns[3][searchable]": "true",
        "columns[3][orderable]": "true",
        "columns[3][search][value]": "",
        "columns[3][search][regex]": "false",
        "columns[4][data]": "fundSize",
        "columns[4][name]": "fundSize",
        "columns[4][searchable]": "true",
        "columns[4][orderable]": "true",
        "columns[4][search][value]": "",
        "columns[4][search][regex]": "false",
        "columns[5][data]": "ter",
        "columns[5][name]": "ter",
        "columns[5][searchable]": "true",
        "columns[5][orderable]": "true",
        "columns[5][search][value]": "",
        "columns[5][search][regex]": "false",
        "columns[6][data]": "",
        "columns[6][name]": "bullet",
        "columns[6][searchable]": "true",
        "columns[6][orderable]": "false",
        "columns[6][search][value]": "",
        "columns[6][search][regex]": "false",
        "columns[7][data]": "weekReturnCUR",
        "columns[7][name]": "weekReturn",
        "columns[7][searchable]": "true",
        "columns[7][orderable]": "true",
        "columns[7][search][value]": "",
        "columns[7][search][regex]": "false",
        "columns[8][data]": "monthReturnCUR",
        "columns[8][name]": "monthReturn",
        "columns[8][searchable]": "true",
        "columns[8][orderable]": "true",
        "columns[8][search][value]": "",
        "columns[8][search][regex]": "false",
        "columns[9][data]": "threeMonthReturnCUR",
        "columns[9][name]": "threeMonthReturn",
        "columns[9][searchable]": "true",
        "columns[9][orderable]": "true",
        "columns[9][search][value]": "",
        "columns[9][search][regex]": "false",
        "columns[10][data]": "sixMonthReturnCUR",
        "columns[10][name]": "sixMonthReturn",
        "columns[10][searchable]": "true",
        "columns[10][orderable]": "true",
        "columns[10][search][value]": "",
        "columns[10][search][regex]": "false",
        "columns[11][data]": "yearReturnCUR",
        "columns[11][name]": "yearReturn",
        "columns[11][searchable]": "true",
        "columns[11][orderable]": "true",
        "columns[11][search][value]": "",
        "columns[11][search][regex]": "false",
        "columns[12][data]": "threeYearReturnCUR",
        "columns[12][name]": "threeYearReturn",
        "columns[12][searchable]": "true",
        "columns[12][orderable]": "true",
        "columns[12][search][value]": "",
        "columns[12][search][regex]": "false",
        "columns[13][data]": "fiveYearReturnCUR",
        "columns[13][name]": "fiveYearReturn",
        "columns[13][searchable]": "true",
        "columns[13][orderable]": "true",
        "columns[13][search][value]": "",
        "columns[13][search][regex]": "false",
        "columns[14][data]": "ytdReturnCUR",
        "columns[14][name]": "ytdReturn",
        "columns[14][searchable]": "true",
        "columns[14][orderable]": "true",
        "columns[14][search][value]": "",
        "columns[14][search][regex]": "false",
        "columns[15][data]": "yearReturn1CUR",
        "columns[15][name]": "yearReturn1",
        "columns[15][searchable]": "true",
        "columns[15][orderable]": "true",
        "columns[15][search][value]": "",
        "columns[15][search][regex]": "false",
        "columns[16][data]": "yearReturn2CUR",
        "columns[16][name]": "yearReturn2",
        "columns[16][searchable]": "true",
        "columns[16][orderable]": "true",
        "columns[16][search][value]": "",
        "columns[16][search][regex]": "false",
        "columns[17][data]": "yearReturn3CUR",
        "columns[17][name]": "yearReturn3",
        "columns[17][searchable]": "true",
        "columns[17][orderable]": "true",
        "columns[17][search][value]": "",
        "columns[17][search][regex]": "false",
        "columns[18][data]": "yearReturn4CUR",
        "columns[18][name]": "yearReturn4",
        "columns[18][searchable]": "true",
        "columns[18][orderable]": "true",
        "columns[18][search][value]": "",
        "columns[18][search][regex]": "false",
        "columns[19][data]": "yearVolatilityCUR",
        "columns[19][name]": "yearVolatility",
        "columns[19][searchable]": "true",
        "columns[19][orderable]": "true",
        "columns[19][search][value]": "",
        "columns[19][search][regex]": "false",
        "columns[20][data]": "threeYearVolatilityCUR",
        "columns[20][name]": "threeYearVolatility",
        "columns[20][searchable]": "true",
        "columns[20][orderable]": "true",
        "columns[20][search][value]": "",
        "columns[20][search][regex]": "false",
        "columns[21][data]": "fiveYearVolatilityCUR",
        "columns[21][name]": "fiveYearVolatility",
        "columns[21][searchable]": "true",
        "columns[21][orderable]": "true",
        "columns[21][search][value]": "",
        "columns[21][search][regex]": "false",
        "columns[22][data]": "yearReturnPerRiskCUR",
        "columns[22][name]": "yearReturnPerRisk",
        "columns[22][searchable]": "true",
        "columns[22][orderable]": "true",
        "columns[22][search][value]": "",
        "columns[22][search][regex]": "false",
        "columns[23][data]": "threeYearReturnPerRiskCUR",
        "columns[23][name]": "threeYearReturnPerRisk",
        "columns[23][searchable]": "true",
        "columns[23][orderable]": "true",
        "columns[23][search][value]": "",
        "columns[23][search][regex]": "false",
        "columns[24][data]": "fiveYearReturnPerRiskCUR",
        "columns[24][name]": "fiveYearReturnPerRisk",
        "columns[24][searchable]": "true",
        "columns[24][orderable]": "true",
        "columns[24][search][value]": "",
        "columns[24][search][regex]": "false",
        "columns[25][data]": "yearMaxDrawdownCUR",
        "columns[25][name]": "yearMaxDrawdown",
        "columns[25][searchable]": "true",
        "columns[25][orderable]": "true",
        "columns[25][search][value]": "",
        "columns[25][search][regex]": "false",
        "columns[26][data]": "threeYearMaxDrawdownCUR",
        "columns[26][name]": "threeYearMaxDrawdown",
        "columns[26][searchable]": "true",
        "columns[26][orderable]": "true",
        "columns[26][search][value]": "",
        "columns[26][search][regex]": "false",
        "columns[27][data]": "fiveYearMaxDrawdownCUR",
        "columns[27][name]": "fiveYearMaxDrawdown",
        "columns[27][searchable]": "true",
        "columns[27][orderable]": "true",
        "columns[27][search][value]": "",
        "columns[27][search][regex]": "false",
        "columns[28][data]": "maxDrawdownCUR",
        "columns[28][name]": "maxDrawdown",
        "columns[28][searchable]": "true",
        "columns[28][orderable]": "true",
        "columns[28][search][value]": "",
        "columns[28][search][regex]": "false",
        "columns[29][data]": "inceptionDate",
        "columns[29][name]": "inceptionDate",
        "columns[29][searchable]": "true",
        "columns[29][orderable]": "true",
        "columns[29][search][value]": "",
        "columns[29][search][regex]": "false",
        "columns[30][data]": "distributionPolicy",
        "columns[30][name]": "distributionPolicy",
        "columns[30][searchable]": "true",
        "columns[30][orderable]": "false",
        "columns[30][search][value]": "",
        "columns[30][search][regex]": "false",
        "columns[31][data]": "sustainable",
        "columns[31][name]": "sustainable",
        "columns[31][searchable]": "true",
        "columns[31][orderable]": "true",
        "columns[31][search][value]": "",
        "columns[31][search][regex]": "false",
        "columns[32][data]": "numberOfHoldings",
        "columns[32][name]": "numberOfHoldings",
        "columns[32][searchable]": "true",
        "columns[32][orderable]": "true",
        "columns[32][search][value]": "",
        "columns[32][search][regex]": "false",
        "columns[33][data]": "currentDividendYield",
        "columns[33][name]": "currentDividendYield",
        "columns[33][searchable]": "true",
        "columns[33][orderable]": "true",
        "columns[33][search][value]": "",
        "columns[33][search][regex]": "false",
        "columns[34][data]": "yearDividendYield",
        "columns[34][name]": "yearDividendYield",
        "columns[34][searchable]": "true",
        "columns[34][orderable]": "true",
        "columns[34][search][value]": "",
        "columns[34][search][regex]": "false",
        "columns[35][data]": "domicileCountry",
        "columns[35][name]": "domicileCountry",
        "columns[35][searchable]": "true",
        "columns[35][orderable]": "false",
        "columns[35][search][value]": "",
        "columns[35][search][regex]": "false",
        "columns[36][data]": "replicationMethod",
        "columns[36][name]": "replicationMethod",
        "columns[36][searchable]": "true",
        "columns[36][orderable]": "false",
        "columns[36][search][value]": "",
        "columns[36][search][regex]": "false",
        "columns[37][data]": "savingsPlanReady",
        "columns[37][name]": "savingsPlanReady",
        "columns[37][searchable]": "true",
        "columns[37][orderable]": "false",
        "columns[37][search][value]": "",
        "columns[37][search][regex]": "false",
        "columns[38][data]": "hasSecuritiesLending",
        "columns[38][name]": "hasSecuritiesLending",
        "columns[38][searchable]": "true",
        "columns[38][orderable]": "false",
        "columns[38][search][value]": "",
        "columns[38][search][regex]": "false",
        "columns[39][data]": "isin",
        "columns[39][name]": "isin",
        "columns[39][searchable]": "true",
        "columns[39][orderable]": "false",
        "columns[39][search][value]": "",
        "columns[39][search][regex]": "false",
        "columns[40][data]": "ticker",
        "columns[40][name]": "ticker",
        "columns[40][searchable]": "true",
        "columns[40][orderable]": "false",
        "columns[40][search][value]": "",
        "columns[40][search][regex]": "false",
        "columns[41][data]": "wkn",
        "columns[41][name]": "wkn",
        "columns[41][searchable]": "true",
        "columns[41][orderable]": "false",
        "columns[41][search][value]": "",
        "columns[41][search][regex]": "false",
        "columns[42][data]": "valorNumber",
        "columns[42][name]": "valorNumber",
        "columns[42][searchable]": "true",
        "columns[42][orderable]": "false",
        "columns[42][search][value]": "",
        "columns[42][search][regex]": "false",
        "columns[43][data]": "",
        "columns[43][name]": "addButton",
        "columns[43][searchable]": "true",
        "columns[43][orderable]": "false",
        "columns[43][search][value]": "",
        "columns[43][search][regex]": "false",
        "order[0][column]": "4", # Your example shows '4', previous showed '25'. Use what is current.
        "order[0][dir]": "desc",
        "search[value]": "",
        "search[regex]": "false",
        "ajaxsortOrder": "desc",
        "ajaxsortField": "fundSize",
        "lang": "en",
        "country": "DE",
        "defaultCurrency": "EUR",
        "universeType": "private",
        "etfsParams": "search=ETFS&query="
    }


    while True:
        # Create a dynamic payload by copying the base and updating 'start' and 'length'
        payload = base_payload.copy()
        payload["start"] = page * page_size
        payload["length"] = page_size
        payload["draw"] = (page * 3) + 3 # Adjusting 'draw' parameter to increment by 3 based on your observation
                                         # (page 0 -> draw 3; page 1 -> draw 6; etc.)


        try:
            response = requests.post(url, headers=headers, data=payload)
            response.raise_for_status()
            data = response.json()
        except requests.exceptions.RequestException as e:
            print(f"Klaida atliekant užklausą: {e}")
            break
        except json.JSONDecodeError as e:
            print(f"Klaida dekoduojant JSON atsakymą: {e}")
            print(f"Gautas atsakymas: {response.text}")
            break

        etfs_on_page = data.get("data", [])
        records_filtered = data.get("recordsFiltered", 0)

        if not etfs_on_page:
            if page == 0:
                print("Duomenų negauta. Patikrinkite užklausos parametrus, antraštes arba payload.")
            else:
                print("Pasiektas duomenų pabaiga.")
            break

        all_etfs.extend(etfs_on_page)
        print(f"Gauta {len(all_etfs)} iš {records_filtered} elementų. Apdorojamas {page + 1} puslapis.")

        if len(all_etfs) >= records_filtered:
            print("Visi duomenys gauti.")
            break

        page += 1
        time.sleep(1)

    if not all_etfs:
        print("Scenarijus baigė darbą be duomenų.")
        return

    df = pd.DataFrame(all_etfs)

    if 'savingsPlanReady' in df.columns:
        df['savingsPlanReady'] = df['savingsPlanReady'].replace(r'<[^>]*>', '', regex=True).str.strip()

    output_dir = os.path.dirname(output_path)
    if output_dir and not os.path.exists(output_dir):
        os.makedirs(output_dir)

    try:
        writer = pd.ExcelWriter(output_path, engine='xlsxwriter')
        df.to_excel(writer, sheet_name='ETFs', index=False)
        workbook = writer.book
        worksheet = writer.sheets['ETFs']

        worksheet.autofilter(0, 0, df.shape[0], df.shape[1] - 1)
        worksheet.freeze_panes(1, 0)

        writer.close()
        print(f"\nDuomenys sėkmingai išsaugoti: {output_path}")
        print(f"Iš viso gauta elementų: {len(all_etfs)}")
    except Exception as e:
        print(f"Klaida išsaugant duomenis į Excel failą: {e}")

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"Praėjo laiko: {elapsed_time:.2f} sekundžių.")

if __name__ == "__main__":
    get_etf_data()
